# Set the command used for new windows (if not specified when
# the window is created) to `shell-command`, which may be any
# sh(1) command.
set-option -g default-command "zsh"

# Change the default <prefix> key to <Ctrl-t>.
set-option -g prefix C-t
unbind-key C-b
# The -r flag indicates this key may repeat, see the repeat-time option.
bind-key -r C-t send-prefix

# Source tmux.conf with <prefix> r.
bind-key r source-file ~/.tmux.conf \; display-message "source-file ~/.tmux.conf"

# Create a new pane by splitting `target-pane`: -h does a
# horizontal split and -v a vertical split; if neither is
# specified, -v is assumed.
bind-key s split-window -v -c "#{pane_current_path}"
bind-key v split-window -h -c "#{pane_current_path}"

# Create a new window in the directory of the current pane.
bind-key c new-window -c "#{pane_current_path}"
# Set the base index from which an unused index should be
# searched when a new window is created. The default is
# zero.
set-option -g base-index 1
# If on, when a window is closed in a session, automatically
# renumber the other windows in numerical order.
set-option -g renumber-windows on
# Break src-pane off from its containing window to make it
# the only pane in dst-window.
# If -d is given, the new window does not become the current window.
bind-key b break-pane -d

# The default key bindings include <Ctrl-l> which is the readline key binding
# for clearing the screen.
# With this enabled you can use <prefix> C-l to clear the screen.
bind-key C-l send-keys 'C-l'

# Set the maximum length of the left component of the status
# line. The default is 10.
set-option -g status-left-length 40

# Smart pane switching with awareness of Vim splits.
# See: https://github.com/christoomey/vim-tmux-navigator
is_vim="ps -o state=,tty=,comm= | grep -iqE '^[^TXZ ]+ +#{s|/dev/||:pane_tty}\s+(\\S+\\/)?g?(view|n?vim?x?)(diff)?$'"
bind-key -n C-h if-shell "$is_vim" "send-keys C-h"  "select-pane -L"
bind-key -n C-j if-shell "$is_vim" "send-keys C-j"  "select-pane -D"
bind-key -n C-k if-shell "$is_vim" "send-keys C-k"  "select-pane -U"
bind-key -n C-l if-shell "$is_vim" "send-keys C-l"  "select-pane -R"
bind-key -n C-\\ if-shell "$is_vim" "send-keys C-\\" "select-pane -l"
bind-key -T copy-mode-vi C-h select-pane -L
bind-key -T copy-mode-vi C-j select-pane -D
bind-key -T copy-mode-vi C-k select-pane -U
bind-key -T copy-mode-vi C-l select-pane -R
bind-key -T copy-mode-vi C-\\ select-pane -l

# Use vi key binding in copy mode.
set-option -wg mode-keys vi
bind-key -T copy-mode-vi v send-keys -X begin-selection
bind-key -T copy-mode-vi y send-keys -X copy-pipe-and-cancel "pbcopy"
bind-key -T copy-mode-vi 0 send-keys -X back-to-indentation
bind-key -T copy-mode-vi / command-prompt -i -p "search down" "send-keys -X search-forward-incremental '%%%'"
bind-key -T copy-mode-vi ? command-prompt -i -p "search up" "send-keys -X search-backward-incremental '%%%'"

